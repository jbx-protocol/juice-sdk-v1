/**
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 */
import { Provider } from '@ethersproject/abstract-provider';
import { Signer } from '@ethersproject/abstract-signer';
import { Contract } from '@ethersproject/contracts';
import {
  abi as Active7DaysFundingCycleBallotABI,
  address as Active7DaysFundingCycleBallotAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/Active7DaysFundingCycleBallot.json';
import {
  abi as FundingCyclesABI,
  address as FundingCyclesAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/FundingCycles.json';
import {
  abi as GovernanceABI,
  address as GovernanceAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/Governance.json';
import {
  abi as ModStoreABI,
  address as ModStoreAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/ModStore.json';
import {
  abi as OperatorStoreABI,
  address as OperatorStoreAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/OperatorStore.json';
import {
  abi as PricesABI,
  address as PricesAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/Prices.json';
import {
  abi as ProjectsABI,
  address as ProjectsAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/Projects.json';
import {
  abi as ProxyPaymentAddressManagerABI,
  address as ProxyPaymentAddressManagerAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/ProxyPaymentAddressManager.json';
import {
  abi as TerminalDirectoryABI,
  address as TerminalDirectoryAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/TerminalDirectory.json';
import {
  abi as TerminalV1ABI,
  address as TerminalV1Address,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/TerminalV1.json';
import {
  abi as TerminalV1_1ABI,
  address as TerminalV1_1Address,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/TerminalV1_1.json';
import {
  abi as TicketBoothABI,
  address as TicketBoothAddress,
} from '@jbx-protocol/contracts-v1/deployments/mainnet/TicketBooth.json';
import {
  Active7DaysFundingCycleBallot,
  FundingCycles,
  Governance,
  ModStore,
  OperatorStore,
  Prices,
  Projects,
  ProxyPaymentAddressManager,
  TerminalDirectory,
  TerminalV1,
  TerminalV1_1,
  TicketBooth,
} from './types/contracts';
export {
  Active7DaysFundingCycleBallot,
  FundingCycles,
  Governance,
  ModStore,
  OperatorStore,
  Prices,
  Projects,
  ProxyPaymentAddressManager,
  TerminalDirectory,
  TerminalV1,
  TerminalV1_1,
  TicketBooth,
} from './types/contracts';

type SignerOrProvider = Signer | Provider;
export const getActive7DaysFundingCycleBallot = (
  signerOrProvider: SignerOrProvider,
) =>
  new Contract(
    Active7DaysFundingCycleBallotAddress,
    Active7DaysFundingCycleBallotABI,
    signerOrProvider,
  ) as Active7DaysFundingCycleBallot;
export const getFundingCycles = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    FundingCyclesAddress,
    FundingCyclesABI,
    signerOrProvider,
  ) as FundingCycles;
export const getGovernance = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    GovernanceAddress,
    GovernanceABI,
    signerOrProvider,
  ) as Governance;
export const getModStore = (signerOrProvider: SignerOrProvider) =>
  new Contract(ModStoreAddress, ModStoreABI, signerOrProvider) as ModStore;
export const getOperatorStore = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    OperatorStoreAddress,
    OperatorStoreABI,
    signerOrProvider,
  ) as OperatorStore;
export const getPrices = (signerOrProvider: SignerOrProvider) =>
  new Contract(PricesAddress, PricesABI, signerOrProvider) as Prices;
export const getProjects = (signerOrProvider: SignerOrProvider) =>
  new Contract(ProjectsAddress, ProjectsABI, signerOrProvider) as Projects;
export const getProxyPaymentAddressManager = (
  signerOrProvider: SignerOrProvider,
) =>
  new Contract(
    ProxyPaymentAddressManagerAddress,
    ProxyPaymentAddressManagerABI,
    signerOrProvider,
  ) as ProxyPaymentAddressManager;
export const getTerminalDirectory = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    TerminalDirectoryAddress,
    TerminalDirectoryABI,
    signerOrProvider,
  ) as TerminalDirectory;
export const getTerminalV1 = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    TerminalV1Address,
    TerminalV1ABI,
    signerOrProvider,
  ) as TerminalV1;
export const getTerminalV1_1 = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    TerminalV1_1Address,
    TerminalV1_1ABI,
    signerOrProvider,
  ) as TerminalV1_1;
export const getTicketBooth = (signerOrProvider: SignerOrProvider) =>
  new Contract(
    TicketBoothAddress,
    TicketBoothABI,
    signerOrProvider,
  ) as TicketBooth;
