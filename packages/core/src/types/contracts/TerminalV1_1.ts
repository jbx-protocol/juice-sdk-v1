/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PayoutModStruct = {
  preferUnstaked: boolean;
  percent: BigNumberish;
  lockedUntil: BigNumberish;
  beneficiary: string;
  allocator: string;
  projectId: BigNumberish;
};

export type PayoutModStructOutput = [
  boolean,
  number,
  number,
  string,
  string,
  BigNumber
] & {
  preferUnstaked: boolean;
  percent: number;
  lockedUntil: number;
  beneficiary: string;
  allocator: string;
  projectId: BigNumber;
};

export type TicketModStruct = {
  preferUnstaked: boolean;
  percent: BigNumberish;
  lockedUntil: BigNumberish;
  beneficiary: string;
};

export type TicketModStructOutput = [boolean, number, number, string] & {
  preferUnstaked: boolean;
  percent: number;
  lockedUntil: number;
  beneficiary: string;
};

export type FundingCyclePropertiesStruct = {
  target: BigNumberish;
  currency: BigNumberish;
  duration: BigNumberish;
  cycleLimit: BigNumberish;
  discountRate: BigNumberish;
  ballot: string;
};

export type FundingCyclePropertiesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  target: BigNumber;
  currency: BigNumber;
  duration: BigNumber;
  cycleLimit: BigNumber;
  discountRate: BigNumber;
  ballot: string;
};

export type FundingCycleMetadata2Struct = {
  reservedRate: BigNumberish;
  bondingCurveRate: BigNumberish;
  reconfigurationBondingCurveRate: BigNumberish;
  payIsPaused: boolean;
  ticketPrintingIsAllowed: boolean;
  treasuryExtension: string;
};

export type FundingCycleMetadata2StructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  string
] & {
  reservedRate: BigNumber;
  bondingCurveRate: BigNumber;
  reconfigurationBondingCurveRate: BigNumber;
  payIsPaused: boolean;
  ticketPrintingIsAllowed: boolean;
  treasuryExtension: string;
};

export interface TerminalV1_1Interface extends utils.Interface {
  functions: {
    "addToBalance(uint256)": FunctionFragment;
    "allowMigration(address)": FunctionFragment;
    "balanceOf(uint256)": FunctionFragment;
    "burnFromDeadAddress(uint256)": FunctionFragment;
    "claimableOverflowOf(address,uint256,uint256)": FunctionFragment;
    "configure(uint256,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,address),(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address)[])": FunctionFragment;
    "currentOverflowOf(uint256)": FunctionFragment;
    "deploy(address,bytes32,string,(uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,bool,bool,address),(bool,uint16,uint48,address,address,uint56)[],(bool,uint16,uint48,address)[])": FunctionFragment;
    "fee()": FunctionFragment;
    "fundingCycles()": FunctionFragment;
    "migrate(uint256,address)": FunctionFragment;
    "migrationIsAllowed(address)": FunctionFragment;
    "modStore()": FunctionFragment;
    "operatorStore()": FunctionFragment;
    "owner()": FunctionFragment;
    "pay(uint256,address,string,bool)": FunctionFragment;
    "prices()": FunctionFragment;
    "printReservedTickets(uint256)": FunctionFragment;
    "printTickets(uint256,uint256,address,string,bool)": FunctionFragment;
    "projects()": FunctionFragment;
    "redeem(address,uint256,uint256,uint256,address,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservedTicketBalanceOf(uint256,uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "tap(uint256,uint256,uint256,uint256)": FunctionFragment;
    "terminalDirectory()": FunctionFragment;
    "ticketBooth()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToBalance"
      | "allowMigration"
      | "balanceOf"
      | "burnFromDeadAddress"
      | "claimableOverflowOf"
      | "configure"
      | "currentOverflowOf"
      | "deploy"
      | "fee"
      | "fundingCycles"
      | "migrate"
      | "migrationIsAllowed"
      | "modStore"
      | "operatorStore"
      | "owner"
      | "pay"
      | "prices"
      | "printReservedTickets"
      | "printTickets"
      | "projects"
      | "redeem"
      | "renounceOwnership"
      | "reservedTicketBalanceOf"
      | "setFee"
      | "tap"
      | "terminalDirectory"
      | "ticketBooth"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowMigration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFromDeadAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableOverflowOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [
      BigNumberish,
      FundingCyclePropertiesStruct,
      FundingCycleMetadata2Struct,
      PayoutModStruct[],
      TicketModStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOverflowOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      string,
      BytesLike,
      string,
      FundingCyclePropertiesStruct,
      FundingCycleMetadata2Struct,
      PayoutModStruct[],
      TicketModStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundingCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationIsAllowed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "modStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "prices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "printReservedTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "printTickets",
    values: [BigNumberish, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservedTicketBalanceOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tap",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminalDirectory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBooth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFromDeadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableOverflowOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentOverflowOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrationIsAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "printReservedTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "printTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedTicketBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminalDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBooth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddToBalance(uint256,uint256,address)": EventFragment;
    "AllowMigration(address)": EventFragment;
    "Configure(uint256,uint256,address)": EventFragment;
    "Deposit(uint256)": EventFragment;
    "DistributeToPayoutMod(uint256,uint256,tuple,uint256,address)": EventFragment;
    "DistributeToTicketMod(uint256,uint256,tuple,uint256,address)": EventFragment;
    "EnsureTargetLocalWei(uint256)": EventFragment;
    "Migrate(uint256,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pay(uint256,uint256,address,uint256,uint256,uint256,string,address)": EventFragment;
    "PrintReserveTickets(uint256,uint256,address,uint256,uint256,address)": EventFragment;
    "PrintTickets(uint256,address,uint256,string,address)": EventFragment;
    "Redeem(address,address,uint256,uint256,uint256,address)": EventFragment;
    "SetFee(uint256)": EventFragment;
    "SetTargetLocalWei(uint256)": EventFragment;
    "SetYielder(address)": EventFragment;
    "Tap(uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Configure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToPayoutMod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToTicketMod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnsureTargetLocalWei"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrintReserveTickets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrintTickets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTargetLocalWei"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetYielder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tap"): EventFragment;
}

export interface AddToBalanceEventObject {
  projectId: BigNumber;
  value: BigNumber;
  caller: string;
}
export type AddToBalanceEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  AddToBalanceEventObject
>;

export type AddToBalanceEventFilter = TypedEventFilter<AddToBalanceEvent>;

export interface AllowMigrationEventObject {
  allowed: string;
}
export type AllowMigrationEvent = TypedEvent<
  [string],
  AllowMigrationEventObject
>;

export type AllowMigrationEventFilter = TypedEventFilter<AllowMigrationEvent>;

export interface ConfigureEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  caller: string;
}
export type ConfigureEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ConfigureEventObject
>;

export type ConfigureEventFilter = TypedEventFilter<ConfigureEvent>;

export interface DepositEventObject {
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DistributeToPayoutModEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  mod: PayoutModStructOutput;
  modCut: BigNumber;
  caller: string;
}
export type DistributeToPayoutModEvent = TypedEvent<
  [BigNumber, BigNumber, PayoutModStructOutput, BigNumber, string],
  DistributeToPayoutModEventObject
>;

export type DistributeToPayoutModEventFilter =
  TypedEventFilter<DistributeToPayoutModEvent>;

export interface DistributeToTicketModEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  mod: TicketModStructOutput;
  modCut: BigNumber;
  caller: string;
}
export type DistributeToTicketModEvent = TypedEvent<
  [BigNumber, BigNumber, TicketModStructOutput, BigNumber, string],
  DistributeToTicketModEventObject
>;

export type DistributeToTicketModEventFilter =
  TypedEventFilter<DistributeToTicketModEvent>;

export interface EnsureTargetLocalWeiEventObject {
  target: BigNumber;
}
export type EnsureTargetLocalWeiEvent = TypedEvent<
  [BigNumber],
  EnsureTargetLocalWeiEventObject
>;

export type EnsureTargetLocalWeiEventFilter =
  TypedEventFilter<EnsureTargetLocalWeiEvent>;

export interface MigrateEventObject {
  projectId: BigNumber;
  to: string;
  _amount: BigNumber;
  caller: string;
}
export type MigrateEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MigrateEventObject
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  beneficiaryTokens: BigNumber;
  totalTokens: BigNumber;
  note: string;
  caller: string;
}
export type PayEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface PrintReserveTicketsEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  count: BigNumber;
  beneficiaryTicketAmount: BigNumber;
  caller: string;
}
export type PrintReserveTicketsEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  PrintReserveTicketsEventObject
>;

export type PrintReserveTicketsEventFilter =
  TypedEventFilter<PrintReserveTicketsEvent>;

export interface PrintTicketsEventObject {
  projectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  memo: string;
  caller: string;
}
export type PrintTicketsEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  PrintTicketsEventObject
>;

export type PrintTicketsEventFilter = TypedEventFilter<PrintTicketsEvent>;

export interface RedeemEventObject {
  holder: string;
  beneficiary: string;
  _projectId: BigNumber;
  amount: BigNumber;
  returnAmount: BigNumber;
  caller: string;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SetFeeEventObject {
  _amount: BigNumber;
}
export type SetFeeEvent = TypedEvent<[BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetTargetLocalWeiEventObject {
  amount: BigNumber;
}
export type SetTargetLocalWeiEvent = TypedEvent<
  [BigNumber],
  SetTargetLocalWeiEventObject
>;

export type SetTargetLocalWeiEventFilter =
  TypedEventFilter<SetTargetLocalWeiEvent>;

export interface SetYielderEventObject {
  newYielder: string;
}
export type SetYielderEvent = TypedEvent<[string], SetYielderEventObject>;

export type SetYielderEventFilter = TypedEventFilter<SetYielderEvent>;

export interface TapEventObject {
  fundingCycleId: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  currency: BigNumber;
  netTransferAmount: BigNumber;
  beneficiaryTransferAmount: BigNumber;
  govFeeAmount: BigNumber;
  caller: string;
}
export type TapEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  TapEventObject
>;

export type TapEventFilter = TypedEventFilter<TapEvent>;

export interface TerminalV1_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TerminalV1_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  Receives and allocates funds belonging to the specified project.
     * @param _projectId The ID of the project to which the funds received belong.
     */
    addToBalance(
      _projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only governance can add a contract to the migration allow list.
     *  Adds to the contract addresses that projects can migrate their Tickets to.
     * @param _contract The contract to allow.
     */
    allowMigration(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The amount of ETH that each project is responsible for.
     */
    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Callable by anyone.
     * A function that burns the supply of the dead address for a project.
     * @param _projectId The ID of the project whose tokens are being burned.
     */
    burnFromDeadAddress(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.
     *  The amount of tokens that can be claimed by the given address.
     * @param _account The address to get an amount for.
     * @param _count The number of Tickets that would be redeemed to get the resulting amount.
     * @param _projectId The ID of the project to get a claimable amount for.
     */
    claimableOverflowOf(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _claimableOverflow: BigNumber }>;

    configure(
      _projectId: BigNumberish,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     *  Gets the current overflowed amount for a specified project.
     * @param _projectId The ID of the project to get overflow for.
     */
    currentOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { overflow: BigNumber }>;

    deploy(
      _owner: string,
      _handle: BytesLike,
      _uri: string,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The percent fee the Juicebox project takes from tapped amounts. Out of 200.
     */
    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycles(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Only a project's owner or a designated operator can migrate it.
     *  Allows a project owner to migrate its funds and operations to a new contract.
     * @param _projectId The ID of the project being migrated.
     * @param _to The contract that will gain the project's funds.
     */
    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrationIsAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * The contract that stores mods for each project.
     */
    modStore(overrides?: CallOverrides): Promise<[string]>;

    /**
     * A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.
     *  Contribute ETH to a project.
     * @param _beneficiary The address to print Tickets for.
     * @param _memo A memo that will be included in the published event.
     * @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued.
     * @param _projectId The ID of the project being contribute to.
     */
    pay(
      _projectId: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The prices feeds.
     */
    prices(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  Prints all reserved tickets for a project.
     * @param _projectId The ID of the project to which the reserved tickets belong.
     */
    printReservedTickets(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only a project's owner or a designated operator can print tickets.
     *  Allows a project to print tickets for a specified beneficiary.
     * @param _amount The amount of tickets to print.
     * @param _beneficiary The address to send the printed tickets to.
     * @param _memo A memo to leave with the printing.
     * @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.
     * @param _projectId The ID of the project to print tickets for.
     */
    printTickets(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The Projects contract which mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Only a ticket's holder or a designated operator can redeem it.
     *  Addresses can redeem their Tickets to claim the project's overflowed ETH.
     * @param _account The account to redeem tickets for.
     * @param _beneficiary The address to send the ETH to.
     * @param _count The number of Tickets to redeem.
     * @param _minReturnedWei The minimum amount of Wei expected in return.
     * @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.
     * @param _projectId The ID of the project to which the Tickets being redeemed belong.
     */
    redeem(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      _minReturnedWei: BigNumberish,
      _beneficiary: string,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     *  Gets the amount of reserved tickets that a project has.
     * @param _projectId The ID of the project to get overflow for.
     * @param _reservedRate The reserved rate to use to make the calculation.
     */
    reservedTicketBalanceOf(
      _projectId: BigNumberish,
      _reservedRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.
     *  Allow the admin to change the fee.
     * @param _fee The new fee percent. Out of 200.
     */
    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Anyone can tap funds on a project's behalf.
     *  Tap into funds that have been contributed to a project's current funding cycle.
     * @param _amount The amount being tapped, in the funding cycle's currency.
     * @param _currency The expected currency being tapped.
     * @param _minReturnedWei The minimum number of wei that the amount should be valued at.
     * @param _projectId The ID of the project to which the funding cycle being tapped belongs.
     */
    tap(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _minReturnedWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The directory of terminals.
     */
    terminalDirectory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The contract that manages Ticket printing and redeeming.
     */
    ticketBooth(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   *  Receives and allocates funds belonging to the specified project.
   * @param _projectId The ID of the project to which the funds received belong.
   */
  addToBalance(
    _projectId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only governance can add a contract to the migration allow list.
   *  Adds to the contract addresses that projects can migrate their Tickets to.
   * @param _contract The contract to allow.
   */
  allowMigration(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The amount of ETH that each project is responsible for.
   */
  balanceOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Callable by anyone.
   * A function that burns the supply of the dead address for a project.
   * @param _projectId The ID of the project whose tokens are being burned.
   */
  burnFromDeadAddress(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.
   *  The amount of tokens that can be claimed by the given address.
   * @param _account The address to get an amount for.
   * @param _count The number of Tickets that would be redeemed to get the resulting amount.
   * @param _projectId The ID of the project to get a claimable amount for.
   */
  claimableOverflowOf(
    _account: string,
    _projectId: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configure(
    _projectId: BigNumberish,
    _properties: FundingCyclePropertiesStruct,
    _metadata: FundingCycleMetadata2Struct,
    _payoutMods: PayoutModStruct[],
    _ticketMods: TicketModStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   *  Gets the current overflowed amount for a specified project.
   * @param _projectId The ID of the project to get overflow for.
   */
  currentOverflowOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deploy(
    _owner: string,
    _handle: BytesLike,
    _uri: string,
    _properties: FundingCyclePropertiesStruct,
    _metadata: FundingCycleMetadata2Struct,
    _payoutMods: PayoutModStruct[],
    _ticketMods: TicketModStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The percent fee the Juicebox project takes from tapped amounts. Out of 200.
   */
  fee(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The contract storing all funding cycle configurations.
   */
  fundingCycles(overrides?: CallOverrides): Promise<string>;

  /**
   * Only a project's owner or a designated operator can migrate it.
   *  Allows a project owner to migrate its funds and operations to a new contract.
   * @param _projectId The ID of the project being migrated.
   * @param _to The contract that will gain the project's funds.
   */
  migrate(
    _projectId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrationIsAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * The contract that stores mods for each project.
   */
  modStore(overrides?: CallOverrides): Promise<string>;

  /**
   * A contract storing operator assignments.
   */
  operatorStore(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   *  Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.
   *  Contribute ETH to a project.
   * @param _beneficiary The address to print Tickets for.
   * @param _memo A memo that will be included in the published event.
   * @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued.
   * @param _projectId The ID of the project being contribute to.
   */
  pay(
    _projectId: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _preferUnstakedTickets: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The prices feeds.
   */
  prices(overrides?: CallOverrides): Promise<string>;

  /**
   *  Prints all reserved tickets for a project.
   * @param _projectId The ID of the project to which the reserved tickets belong.
   */
  printReservedTickets(
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only a project's owner or a designated operator can print tickets.
   *  Allows a project to print tickets for a specified beneficiary.
   * @param _amount The amount of tickets to print.
   * @param _beneficiary The address to send the printed tickets to.
   * @param _memo A memo to leave with the printing.
   * @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.
   * @param _projectId The ID of the project to print tickets for.
   */
  printTickets(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _beneficiary: string,
    _memo: string,
    _preferUnstakedTickets: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The Projects contract which mints ERC-721's that represent project ownership and transfers.
   */
  projects(overrides?: CallOverrides): Promise<string>;

  /**
   * Only a ticket's holder or a designated operator can redeem it.
   *  Addresses can redeem their Tickets to claim the project's overflowed ETH.
   * @param _account The account to redeem tickets for.
   * @param _beneficiary The address to send the ETH to.
   * @param _count The number of Tickets to redeem.
   * @param _minReturnedWei The minimum amount of Wei expected in return.
   * @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.
   * @param _projectId The ID of the project to which the Tickets being redeemed belong.
   */
  redeem(
    _account: string,
    _projectId: BigNumberish,
    _count: BigNumberish,
    _minReturnedWei: BigNumberish,
    _beneficiary: string,
    _preferUnstaked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   *  Gets the amount of reserved tickets that a project has.
   * @param _projectId The ID of the project to get overflow for.
   * @param _reservedRate The reserved rate to use to make the calculation.
   */
  reservedTicketBalanceOf(
    _projectId: BigNumberish,
    _reservedRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.
   *  Allow the admin to change the fee.
   * @param _fee The new fee percent. Out of 200.
   */
  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Anyone can tap funds on a project's behalf.
   *  Tap into funds that have been contributed to a project's current funding cycle.
   * @param _amount The amount being tapped, in the funding cycle's currency.
   * @param _currency The expected currency being tapped.
   * @param _minReturnedWei The minimum number of wei that the amount should be valued at.
   * @param _projectId The ID of the project to which the funding cycle being tapped belongs.
   */
  tap(
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _currency: BigNumberish,
    _minReturnedWei: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The directory of terminals.
   */
  terminalDirectory(overrides?: CallOverrides): Promise<string>;

  /**
   * The contract that manages Ticket printing and redeeming.
   */
  ticketBooth(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     *  Receives and allocates funds belonging to the specified project.
     * @param _projectId The ID of the project to which the funds received belong.
     */
    addToBalance(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only governance can add a contract to the migration allow list.
     *  Adds to the contract addresses that projects can migrate their Tickets to.
     * @param _contract The contract to allow.
     */
    allowMigration(_contract: string, overrides?: CallOverrides): Promise<void>;

    /**
     * The amount of ETH that each project is responsible for.
     */
    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Callable by anyone.
     * A function that burns the supply of the dead address for a project.
     * @param _projectId The ID of the project whose tokens are being burned.
     */
    burnFromDeadAddress(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.
     *  The amount of tokens that can be claimed by the given address.
     * @param _account The address to get an amount for.
     * @param _count The number of Tickets that would be redeemed to get the resulting amount.
     * @param _projectId The ID of the project to get a claimable amount for.
     */
    claimableOverflowOf(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      _projectId: BigNumberish,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  Gets the current overflowed amount for a specified project.
     * @param _projectId The ID of the project to get overflow for.
     */
    currentOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _owner: string,
      _handle: BytesLike,
      _uri: string,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The percent fee the Juicebox project takes from tapped amounts. Out of 200.
     */
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycles(overrides?: CallOverrides): Promise<string>;

    /**
     * Only a project's owner or a designated operator can migrate it.
     *  Allows a project owner to migrate its funds and operations to a new contract.
     * @param _projectId The ID of the project being migrated.
     * @param _to The contract that will gain the project's funds.
     */
    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrationIsAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The contract that stores mods for each project.
     */
    modStore(overrides?: CallOverrides): Promise<string>;

    /**
     * A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     *  Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.
     *  Contribute ETH to a project.
     * @param _beneficiary The address to print Tickets for.
     * @param _memo A memo that will be included in the published event.
     * @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued.
     * @param _projectId The ID of the project being contribute to.
     */
    pay(
      _projectId: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The prices feeds.
     */
    prices(overrides?: CallOverrides): Promise<string>;

    /**
     *  Prints all reserved tickets for a project.
     * @param _projectId The ID of the project to which the reserved tickets belong.
     */
    printReservedTickets(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Only a project's owner or a designated operator can print tickets.
     *  Allows a project to print tickets for a specified beneficiary.
     * @param _amount The amount of tickets to print.
     * @param _beneficiary The address to send the printed tickets to.
     * @param _memo A memo to leave with the printing.
     * @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.
     * @param _projectId The ID of the project to print tickets for.
     */
    printTickets(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The Projects contract which mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<string>;

    /**
     * Only a ticket's holder or a designated operator can redeem it.
     *  Addresses can redeem their Tickets to claim the project's overflowed ETH.
     * @param _account The account to redeem tickets for.
     * @param _beneficiary The address to send the ETH to.
     * @param _count The number of Tickets to redeem.
     * @param _minReturnedWei The minimum amount of Wei expected in return.
     * @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.
     * @param _projectId The ID of the project to which the Tickets being redeemed belong.
     */
    redeem(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      _minReturnedWei: BigNumberish,
      _beneficiary: string,
      _preferUnstaked: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     *  Gets the amount of reserved tickets that a project has.
     * @param _projectId The ID of the project to get overflow for.
     * @param _reservedRate The reserved rate to use to make the calculation.
     */
    reservedTicketBalanceOf(
      _projectId: BigNumberish,
      _reservedRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.
     *  Allow the admin to change the fee.
     * @param _fee The new fee percent. Out of 200.
     */
    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Anyone can tap funds on a project's behalf.
     *  Tap into funds that have been contributed to a project's current funding cycle.
     * @param _amount The amount being tapped, in the funding cycle's currency.
     * @param _currency The expected currency being tapped.
     * @param _minReturnedWei The minimum number of wei that the amount should be valued at.
     * @param _projectId The ID of the project to which the funding cycle being tapped belongs.
     */
    tap(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _minReturnedWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The directory of terminals.
     */
    terminalDirectory(overrides?: CallOverrides): Promise<string>;

    /**
     * The contract that manages Ticket printing and redeeming.
     */
    ticketBooth(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddToBalance(uint256,uint256,address)"(
      projectId?: BigNumberish | null,
      value?: null,
      caller?: null
    ): AddToBalanceEventFilter;
    AddToBalance(
      projectId?: BigNumberish | null,
      value?: null,
      caller?: null
    ): AddToBalanceEventFilter;

    "AllowMigration(address)"(allowed?: null): AllowMigrationEventFilter;
    AllowMigration(allowed?: null): AllowMigrationEventFilter;

    "Configure(uint256,uint256,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      caller?: null
    ): ConfigureEventFilter;
    Configure(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      caller?: null
    ): ConfigureEventFilter;

    "Deposit(uint256)"(amount?: null): DepositEventFilter;
    Deposit(amount?: null): DepositEventFilter;

    "DistributeToPayoutMod(uint256,uint256,tuple,uint256,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      mod?: null,
      modCut?: null,
      caller?: null
    ): DistributeToPayoutModEventFilter;
    DistributeToPayoutMod(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      mod?: null,
      modCut?: null,
      caller?: null
    ): DistributeToPayoutModEventFilter;

    "DistributeToTicketMod(uint256,uint256,tuple,uint256,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      mod?: null,
      modCut?: null,
      caller?: null
    ): DistributeToTicketModEventFilter;
    DistributeToTicketMod(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      mod?: null,
      modCut?: null,
      caller?: null
    ): DistributeToTicketModEventFilter;

    "EnsureTargetLocalWei(uint256)"(
      target?: null
    ): EnsureTargetLocalWeiEventFilter;
    EnsureTargetLocalWei(target?: null): EnsureTargetLocalWeiEventFilter;

    "Migrate(uint256,address,uint256,address)"(
      projectId?: BigNumberish | null,
      to?: string | null,
      _amount?: null,
      caller?: null
    ): MigrateEventFilter;
    Migrate(
      projectId?: BigNumberish | null,
      to?: string | null,
      _amount?: null,
      caller?: null
    ): MigrateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pay(uint256,uint256,address,uint256,uint256,uint256,string,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      beneficiaryTokens?: null,
      totalTokens?: null,
      note?: null,
      caller?: null
    ): PayEventFilter;
    Pay(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      beneficiaryTokens?: null,
      totalTokens?: null,
      note?: null,
      caller?: null
    ): PayEventFilter;

    "PrintReserveTickets(uint256,uint256,address,uint256,uint256,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      count?: null,
      beneficiaryTicketAmount?: null,
      caller?: null
    ): PrintReserveTicketsEventFilter;
    PrintReserveTickets(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      count?: null,
      beneficiaryTicketAmount?: null,
      caller?: null
    ): PrintReserveTicketsEventFilter;

    "PrintTickets(uint256,address,uint256,string,address)"(
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      memo?: null,
      caller?: null
    ): PrintTicketsEventFilter;
    PrintTickets(
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      memo?: null,
      caller?: null
    ): PrintTicketsEventFilter;

    "Redeem(address,address,uint256,uint256,uint256,address)"(
      holder?: string | null,
      beneficiary?: string | null,
      _projectId?: BigNumberish | null,
      amount?: null,
      returnAmount?: null,
      caller?: null
    ): RedeemEventFilter;
    Redeem(
      holder?: string | null,
      beneficiary?: string | null,
      _projectId?: BigNumberish | null,
      amount?: null,
      returnAmount?: null,
      caller?: null
    ): RedeemEventFilter;

    "SetFee(uint256)"(_amount?: null): SetFeeEventFilter;
    SetFee(_amount?: null): SetFeeEventFilter;

    "SetTargetLocalWei(uint256)"(amount?: null): SetTargetLocalWeiEventFilter;
    SetTargetLocalWei(amount?: null): SetTargetLocalWeiEventFilter;

    "SetYielder(address)"(newYielder?: null): SetYielderEventFilter;
    SetYielder(newYielder?: null): SetYielderEventFilter;

    "Tap(uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,address)"(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      currency?: null,
      netTransferAmount?: null,
      beneficiaryTransferAmount?: null,
      govFeeAmount?: null,
      caller?: null
    ): TapEventFilter;
    Tap(
      fundingCycleId?: BigNumberish | null,
      projectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      currency?: null,
      netTransferAmount?: null,
      beneficiaryTransferAmount?: null,
      govFeeAmount?: null,
      caller?: null
    ): TapEventFilter;
  };

  estimateGas: {
    /**
     *  Receives and allocates funds belonging to the specified project.
     * @param _projectId The ID of the project to which the funds received belong.
     */
    addToBalance(
      _projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only governance can add a contract to the migration allow list.
     *  Adds to the contract addresses that projects can migrate their Tickets to.
     * @param _contract The contract to allow.
     */
    allowMigration(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The amount of ETH that each project is responsible for.
     */
    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Callable by anyone.
     * A function that burns the supply of the dead address for a project.
     * @param _projectId The ID of the project whose tokens are being burned.
     */
    burnFromDeadAddress(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.
     *  The amount of tokens that can be claimed by the given address.
     * @param _account The address to get an amount for.
     * @param _count The number of Tickets that would be redeemed to get the resulting amount.
     * @param _projectId The ID of the project to get a claimable amount for.
     */
    claimableOverflowOf(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      _projectId: BigNumberish,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     *  Gets the current overflowed amount for a specified project.
     * @param _projectId The ID of the project to get overflow for.
     */
    currentOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      _owner: string,
      _handle: BytesLike,
      _uri: string,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The percent fee the Juicebox project takes from tapped amounts. Out of 200.
     */
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only a project's owner or a designated operator can migrate it.
     *  Allows a project owner to migrate its funds and operations to a new contract.
     * @param _projectId The ID of the project being migrated.
     * @param _to The contract that will gain the project's funds.
     */
    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrationIsAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The contract that stores mods for each project.
     */
    modStore(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.
     *  Contribute ETH to a project.
     * @param _beneficiary The address to print Tickets for.
     * @param _memo A memo that will be included in the published event.
     * @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued.
     * @param _projectId The ID of the project being contribute to.
     */
    pay(
      _projectId: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The prices feeds.
     */
    prices(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  Prints all reserved tickets for a project.
     * @param _projectId The ID of the project to which the reserved tickets belong.
     */
    printReservedTickets(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only a project's owner or a designated operator can print tickets.
     *  Allows a project to print tickets for a specified beneficiary.
     * @param _amount The amount of tickets to print.
     * @param _beneficiary The address to send the printed tickets to.
     * @param _memo A memo to leave with the printing.
     * @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.
     * @param _projectId The ID of the project to print tickets for.
     */
    printTickets(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The Projects contract which mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only a ticket's holder or a designated operator can redeem it.
     *  Addresses can redeem their Tickets to claim the project's overflowed ETH.
     * @param _account The account to redeem tickets for.
     * @param _beneficiary The address to send the ETH to.
     * @param _count The number of Tickets to redeem.
     * @param _minReturnedWei The minimum amount of Wei expected in return.
     * @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.
     * @param _projectId The ID of the project to which the Tickets being redeemed belong.
     */
    redeem(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      _minReturnedWei: BigNumberish,
      _beneficiary: string,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     *  Gets the amount of reserved tickets that a project has.
     * @param _projectId The ID of the project to get overflow for.
     * @param _reservedRate The reserved rate to use to make the calculation.
     */
    reservedTicketBalanceOf(
      _projectId: BigNumberish,
      _reservedRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.
     *  Allow the admin to change the fee.
     * @param _fee The new fee percent. Out of 200.
     */
    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Anyone can tap funds on a project's behalf.
     *  Tap into funds that have been contributed to a project's current funding cycle.
     * @param _amount The amount being tapped, in the funding cycle's currency.
     * @param _currency The expected currency being tapped.
     * @param _minReturnedWei The minimum number of wei that the amount should be valued at.
     * @param _projectId The ID of the project to which the funding cycle being tapped belongs.
     */
    tap(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _minReturnedWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The directory of terminals.
     */
    terminalDirectory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The contract that manages Ticket printing and redeeming.
     */
    ticketBooth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  Receives and allocates funds belonging to the specified project.
     * @param _projectId The ID of the project to which the funds received belong.
     */
    addToBalance(
      _projectId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only governance can add a contract to the migration allow list.
     *  Adds to the contract addresses that projects can migrate their Tickets to.
     * @param _contract The contract to allow.
     */
    allowMigration(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The amount of ETH that each project is responsible for.
     */
    balanceOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Callable by anyone.
     * A function that burns the supply of the dead address for a project.
     * @param _projectId The ID of the project whose tokens are being burned.
     */
    burnFromDeadAddress(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.
     *  The amount of tokens that can be claimed by the given address.
     * @param _account The address to get an amount for.
     * @param _count The number of Tickets that would be redeemed to get the resulting amount.
     * @param _projectId The ID of the project to get a claimable amount for.
     */
    claimableOverflowOf(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configure(
      _projectId: BigNumberish,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     *  Gets the current overflowed amount for a specified project.
     * @param _projectId The ID of the project to get overflow for.
     */
    currentOverflowOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _owner: string,
      _handle: BytesLike,
      _uri: string,
      _properties: FundingCyclePropertiesStruct,
      _metadata: FundingCycleMetadata2Struct,
      _payoutMods: PayoutModStruct[],
      _ticketMods: TicketModStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The percent fee the Juicebox project takes from tapped amounts. Out of 200.
     */
    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Only a project's owner or a designated operator can migrate it.
     *  Allows a project owner to migrate its funds and operations to a new contract.
     * @param _projectId The ID of the project being migrated.
     * @param _to The contract that will gain the project's funds.
     */
    migrate(
      _projectId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrationIsAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The contract that stores mods for each project.
     */
    modStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.
     *  Contribute ETH to a project.
     * @param _beneficiary The address to print Tickets for.
     * @param _memo A memo that will be included in the published event.
     * @param _preferUnstakedTickets Whether ERC20's should be unstaked automatically if they have been issued.
     * @param _projectId The ID of the project being contribute to.
     */
    pay(
      _projectId: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The prices feeds.
     */
    prices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  Prints all reserved tickets for a project.
     * @param _projectId The ID of the project to which the reserved tickets belong.
     */
    printReservedTickets(
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only a project's owner or a designated operator can print tickets.
     *  Allows a project to print tickets for a specified beneficiary.
     * @param _amount The amount of tickets to print.
     * @param _beneficiary The address to send the printed tickets to.
     * @param _memo A memo to leave with the printing.
     * @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.
     * @param _projectId The ID of the project to print tickets for.
     */
    printTickets(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _beneficiary: string,
      _memo: string,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The Projects contract which mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Only a ticket's holder or a designated operator can redeem it.
     *  Addresses can redeem their Tickets to claim the project's overflowed ETH.
     * @param _account The account to redeem tickets for.
     * @param _beneficiary The address to send the ETH to.
     * @param _count The number of Tickets to redeem.
     * @param _minReturnedWei The minimum amount of Wei expected in return.
     * @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.
     * @param _projectId The ID of the project to which the Tickets being redeemed belong.
     */
    redeem(
      _account: string,
      _projectId: BigNumberish,
      _count: BigNumberish,
      _minReturnedWei: BigNumberish,
      _beneficiary: string,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     *  Gets the amount of reserved tickets that a project has.
     * @param _projectId The ID of the project to get overflow for.
     * @param _reservedRate The reserved rate to use to make the calculation.
     */
    reservedTicketBalanceOf(
      _projectId: BigNumberish,
      _reservedRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.
     *  Allow the admin to change the fee.
     * @param _fee The new fee percent. Out of 200.
     */
    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Anyone can tap funds on a project's behalf.
     *  Tap into funds that have been contributed to a project's current funding cycle.
     * @param _amount The amount being tapped, in the funding cycle's currency.
     * @param _currency The expected currency being tapped.
     * @param _minReturnedWei The minimum number of wei that the amount should be valued at.
     * @param _projectId The ID of the project to which the funding cycle being tapped belongs.
     */
    tap(
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _currency: BigNumberish,
      _minReturnedWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The directory of terminals.
     */
    terminalDirectory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The contract that manages Ticket printing and redeeming.
     */
    ticketBooth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
